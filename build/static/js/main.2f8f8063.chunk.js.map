{"version":3,"sources":["utils/tokens/getAccountInfo.ts","utils/tokens/createAssociatedTokenAccountInstruction.ts","logo.svg","components/myWallet.tsx","components/templates/input.tsx","components/templates/button.tsx","pages/create-escrow.tsx","components/accountList.tsx","utils/tokens/getOrCreateAssociatedTokenAccount.ts","utils/tokens/getAssociatedTokenAddress.ts","web3hooks/TokenInfoHook.ts","utils/config.ts","App.tsx","Providers.tsx","index.tsx"],"names":["AccountState","async","getAccountInfo","connection","address","commitment","programId","arguments","length","undefined","TOKEN_PROGRAM_ID","info","Error","owner","equals","data","AccountLayout","span","rawAccount","decode","Buffer","from","mint","amount","delegate","delegateOption","delegatedAmount","isInitialized","state","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","rentExemptReserve","closeAuthority","closeAuthorityOption","createAssociatedTokenAccountInstruction","payer","associatedToken","associatedTokenProgramId","ASSOCIATED_TOKEN_PROGRAM_ID","keys","pubkey","isSigner","isWritable","SystemProgram","SYSVAR_RENT_PUBKEY","TransactionInstruction","alloc","MyWallet","_jsx","className","children","WalletModalProvider","WalletMultiButton","Input","_ref","title","value","onChangeHandler","_jsxs","_Fragment","htmlFor","onChange","e","target","type","id","Button","text","onClickHandler","disabled","onClick","concat","CreateEscrow","setMsg","setDisplayPubKey","setErrMsg","receiverPublickey","setReceiverPublickey","useState","setAmount","publicKey","useWallet","createEscrow","useCallback","url","res","fetch","then","json","console","log","isSuccess","escrowAcc","message","error","useEffect","toString","AccountList","accounts","setAccounts","getData","map","temp_token_account_pubkey","escrow_amount","status","completed","scope","acc","getOrCreateAssociatedTokenAccount","signTransaction","allowOwnerOffCurve","PublicKey","isOnCurve","toBuffer","findProgramAddress","getAssociatedTokenAddress","account","transaction","Transaction","add","blockHash","getRecentBlockhash","feePayer","recentBlockhash","blockhash","signed","signature","sendRawTransaction","serialize","confirmTransaction","config","localhost","usdcMintPubKey","escrowProgramId","App","wallet","mintPublickey","balance","tokenBalance","mintPubkeyString","setBalance","setTokenBalance","useConnection","senderPubKey","WalletNotConnectedError","getBalance","LAMPORTS_PER_SOL","tokenAccount","Number","setInterval","TokenInfoHook","displayPubKey","errMsg","msg","localStorage","getItem","packageJson","version","window","caches","names","forEach","name","delete","location","reload","clear","setItem","src","logo","alt","connected","toFixed","Providers","network","WalletAdapterNetwork","Devnet","clusterUrl","React","useMemo","clusterApiUrl","endpoint","wallets","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","ConnectionProvider","WalletProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f8f8063.chunk.js","sourcesContent":["import { TOKEN_PROGRAM_ID, AccountLayout } from '@solana/spl-token'\nimport { Connection, PublicKey, Commitment } from '@solana/web3.js'\n\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\nexport async function getAccountInfo(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n) {\n    const info = await connection.getAccountInfo(address, commitment)\n    if (!info) throw new Error('TokenAccountNotFoundError')\n    if (!info.owner.equals(programId)) throw new Error('TokenInvalidAccountOwnerError')\n    if (info.data.length !== AccountLayout.span) throw new Error('TokenInvalidAccountSizeError')\n\n    const rawAccount = AccountLayout.decode(Buffer.from(info.data))\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n    }\n}\n","import { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token'\nimport { PublicKey, TransactionInstruction, SystemProgram, SYSVAR_RENT_PUBKEY } from '@solana/web3.js'\n\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ]\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.alloc(0),\n    })\n}","export default __webpack_public_path__ + \"static/media/logo.317aa4d3.svg\";","import React from 'react';\nimport {\n    WalletModalProvider,\n    WalletMultiButton,\n} from '@solana/wallet-adapter-react-ui';\n\nconst MyWallet: React.FC = () => {\n    // const { connection } = useConnection();\n    // let walletAddress = \"\";\n\n    // if (wallet.connected && wallet.publicKey) {\n    //     walletAddress = wallet.publicKey.toString()\n    // }\n\n    return (\n        <div className=\"\">\n            <span className=\"\">\n                <WalletModalProvider>\n                    <WalletMultiButton />\n                </WalletModalProvider>\n            </span>\n        </div>\n    );\n};\n\nexport default MyWallet;\n","import React from 'react'\n\ninterface Props {\n    title: string,\n    value: string,\n    onChangeHandler: (e: any) => void\n}\n\nexport default function Input({ title, value, onChangeHandler }: Props) {\n    return (\n        <>\n            <label htmlFor=\"large-input\" className=\"block mb-2 text-sm font-medium \n            text-gray-900 dark:text-white\">\n                {title}\n            </label>\n\n            <input\n                value={value}\n                onChange={(e) => onChangeHandler(e.target.value)}\n                type=\"text\"\n                id=\"large-input\"\n                className=\"bg-gray-50 border border-gray-300 \n            text-gray-900 text-sm rounded-lg focus:ring-blue-500 \n            focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 \n            dark:border-gray-600 dark:placeholder-gray-400 \n            dark:text-white dark:focus:ring-blue-500 \n            dark:focus:border-blue-500\"\n            />\n        </>\n    )\n}\n","import React from 'react'\n\ninterface Props {\n    text: string,\n    onClickHandler: (e: any) => void,\n    disabled: boolean\n}\nexport default function Button({ text, onClickHandler, disabled }: Props) {\n    const classNames = `focus:outline-none text-white \n    bg-mainPurple \n    font-medium rounded-lg \n    text-sm px-5 py-2.5 mb-2\n    \n    hover:ring-4\n    focus:ring-4\n    \n    focus:ring-gray-400 \n      hover:ring-gray-600\n      dark:hover:ring-gray-600\n      `\n    const classNameDisabled = \"bg-gray-400\"\n    \n    return (\n        <button\n            onClick={!disabled ? onClickHandler : () => {}}\n            type=\"button\"\n            className={`${classNames} ${disabled && classNameDisabled}`}>\n            {text}\n        </button>\n\n    )\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport Input from '../components/templates/input'\nimport Button from '../components/templates/button'\nimport { useWallet } from '@solana/wallet-adapter-react'\n\nfunction CreateEscrow({ setMsg, setDisplayPubKey, setErrMsg }: any) {\n    const [receiverPublickey, setReceiverPublickey] = useState('')\n\n    const [amount, setAmount] = useState('2')\n    const { publicKey } = useWallet();\n\n    const createEscrow = useCallback(async () => {\n        try {\n            if (!receiverPublickey || !amount) return setErrMsg(\"Receiver Public Key and amount is required!!\")\n            const url = `https://oxescrow.api.oxquantumprojects.lol/create_escrow?receiverPubKey=${receiverPublickey}&amount=${amount}`\n            const res = (await fetch(url).then(res => res.json()))\n            console.log('res', res);\n            if (res.isSuccess) {\n                setDisplayPubKey(res.data.escrowAcc)\n                setMsg(res.message)\n            } else {\n                setErrMsg(res.message)\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }, [receiverPublickey, amount, setDisplayPubKey, setErrMsg, setMsg])\n\n    useEffect(() => {\n        if (publicKey == null) return\n        setReceiverPublickey(publicKey.toString())\n    }, [publicKey])\n    return (\n        <form className=\"max-w-sm mx-auto\">\n            <div className=\"mb-5\">\n                <Input\n                    onChangeHandler={setReceiverPublickey}\n                    value={receiverPublickey}\n                    title='Preferred receiving public key'\n                />\n            </div>\n            <div className=\"mb-5\">\n                <Input\n                    onChangeHandler={setAmount}\n                    value={amount}\n                    title='Amount to receive'\n                />\n            </div>\n            <Button text='Send transaction' disabled={!publicKey} onClickHandler={createEscrow} />\n        </form>\n\n    )\n}\n\nexport default CreateEscrow","import { useWallet } from '@solana/wallet-adapter-react';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nconst AccountList: React.FC = () => {\n    const { publicKey } = useWallet();\n    const [accounts, setAccounts] = useState([])\n\n\n    const getData = useCallback((async () => {\n        try {\n            if (!publicKey) return\n            const url = 'https://oxescrow.api.oxquantumprojects.lol/getescrows?publicKey='\n            const res = (await fetch(url + publicKey).then(res => res.json()))\n            setAccounts(res.map((data: any) => {\n                const escrowData = { pubkey: data.temp_token_account_pubkey, amount: data.escrow_amount, status: data.completed ? \"Paid\" : \"Pending\" };\n                return escrowData\n            }))\n\n        } catch (error) {\n            console.log(error);\n        }\n    }), [publicKey])\n\n    useEffect(() => {\n        getData()\n    }, [getData])\n\n    return (\n        <>\n            <div className=\"relative overflow-x-auto\">\n                <table className=\"w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400\">\n                    <thead className=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n                        <tr>\n                            <th scope=\"col\" className=\"px-6 py-3\">\n                                PublicKey\n                            </th>\n                            <th scope=\"col\" className=\"px-6 py-3\">\n                                Amount\n                            </th>\n                            <th scope=\"col\" className=\"px-6 py-3\">\n                                Status\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {accounts.map((acc: any) => (\n                            <tr key={acc.pubkey} className=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\">\n                                <th scope=\"row\" className=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white\">\n                                    {acc.pubkey}\n                                </th>\n                                <td className=\"px-6 py-4\">\n                                    {acc.amount}\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                    {acc.status}\n                                </td>\n                            </tr>\n                        ))}\n\n                    </tbody>\n                </table>\n            </div>\n\n        </>\n    )\n}\n\nexport default AccountList","import { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token'\nimport { SignerWalletAdapterProps } from '@solana/wallet-adapter-base'\nimport { Connection, PublicKey, Commitment, Transaction } from '@solana/web3.js'\nimport { createAssociatedTokenAccountInstruction } from './createAssociatedTokenAccountInstruction'\nimport { getAccountInfo } from './getAccountInfo'\nimport { getAssociatedTokenAddress } from './getAssociatedTokenAddress'\n\nexport async function getOrCreateAssociatedTokenAccount(\n    connection: Connection,\n    payer: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    signTransaction: SignerWalletAdapterProps['signTransaction'],\n    allowOwnerOffCurve = false,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n) {\n    const associatedToken = await getAssociatedTokenAddress(\n        mint,\n        owner,\n        allowOwnerOffCurve,\n        programId,\n        associatedTokenProgramId\n    )\n\n    // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically.\n    let account\n    try {\n        account = await getAccountInfo(connection, associatedToken, commitment, programId)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n        // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n        // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n        // TokenInvalidAccountOwnerError in this code path.\n        if (error.message === 'TokenAccountNotFoundError' || error.message === 'TokenInvalidAccountOwnerError') {\n            // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n            try {\n                const transaction = new Transaction().add(\n                    createAssociatedTokenAccountInstruction(\n                        payer,\n                        associatedToken,\n                        owner,\n                        mint,\n                        programId,\n                        associatedTokenProgramId\n                    )\n                )\n\n                const blockHash = await connection.getRecentBlockhash()\n                transaction.feePayer = await payer\n                transaction.recentBlockhash = await blockHash.blockhash\n                const signed = await signTransaction(transaction)\n\n                const signature = await connection.sendRawTransaction(signed.serialize())\n\n                await connection.confirmTransaction(signature)\n            } catch (error: unknown) {\n                // Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n                // instruction error if the associated account exists already.\n            }\n\n            // Now this should always succeed\n            account = await getAccountInfo(connection, associatedToken, commitment, programId)\n        } else {\n            throw error\n        }\n    }\n\n    if (!account.mint.equals(new PublicKey(mint))) throw Error('TokenInvalidMintError')\n    if (!account.owner.equals(new PublicKey(owner))) throw new Error('TokenInvalidOwnerError')\n\n    return account\n}","// getAssociatedTokerAddress.ts\nimport { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token'\nimport { PublicKey } from '@solana/web3.js'\n\nexport async function getAssociatedTokenAddress(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new Error('TokenOwnerOffCurveError')\n\n    const [address] = await PublicKey.findProgramAddress(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    )\n\n    return address\n}","import { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\nimport { useCallback, useState } from \"react\";\nimport { getOrCreateAssociatedTokenAccount } from \"../utils/tokens/getOrCreateAssociatedTokenAccount\";\n\nexport const TokenInfoHook = (mintPubkeyString: string) => {\n  const [balance, setBalance] = useState(0);\n  const [tokenBalance, setTokenBalance] = useState(0);\n  const { connection } = useConnection();\n  const { publicKey: senderPubKey, signTransaction } = useWallet();\n\n  const onClick = useCallback(async () => {\n    try {\n      if (!senderPubKey || !signTransaction)\n        throw new WalletNotConnectedError();\n\n      const balance = await connection.getBalance(senderPubKey)\n      setBalance(balance / LAMPORTS_PER_SOL)\n      \n      const tokenAccount = await getOrCreateAssociatedTokenAccount(\n        connection,\n        senderPubKey,\n        new PublicKey(mintPubkeyString),\n        senderPubKey,\n        signTransaction\n      );\n\n      if (tokenAccount?.amount) {\n        setTokenBalance(Number(tokenAccount?.amount.toString()));\n      }\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }, [connection, senderPubKey, mintPubkeyString, signTransaction]);\n\n  setInterval(() => {\n    console.log(\"refreshing...\");\n    onClick();\n  }, 6000);\n  \n  return { balance, tokenBalance };\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const config = {\n  localhost: false,\n  usdcMintPubKey: new PublicKey(\"5CzMpU4F7pyQdLvFLTrweqD3sAyuvFSYAA7keq6PQPaH\"),\n  escrowProgramId: new PublicKey(\n    \"JDvqLZ7ytrWUrPeDArR6E7XQe84VJExm6XvQHV5wst6N\"\n  ),\n};\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport MyWallet from \"./components/myWallet\";\nimport CreateEscrow from \"./pages/create-escrow\";\nimport AccountList from \"./components/accountList\";\nimport { TokenInfoHook } from \"./web3hooks/TokenInfoHook\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { config } from \"./utils/config\";\nimport packageJson from \"../package.json\";\n\nfunction App() {\n  const wallet = useWallet();\n  const [mintPublickey,] = useState(config.usdcMintPubKey.toString())\n  const { balance, tokenBalance } = TokenInfoHook(mintPublickey)\n  const [displayPubKey, setDisplayPubKey] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const [msg, setMsg] = useState('')\n\n  const check = () => {\n    let version = localStorage.getItem('version');\n    if (version !== packageJson.version) {\n      if ('caches' in window) {\n        caches.keys().then((names) => {\n          // Delete all the cache files\n          names.forEach(name => {\n            caches.delete(name);\n          })\n        });\n\n        window.location.reload();\n      }\n\n      localStorage.clear();\n      localStorage.setItem('version', packageJson.version);\n    }\n  }\n\n  useEffect(() => {\n    check()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo mx-auto\" alt=\"logo\" />\n        <h3 className=\"text-white text-center\">\n          Oxescrow Escrow Systems\n        </h3>\n        <h3 className=\"text-white text-center\">\n          {wallet.connected && wallet.publicKey && (\n            <div className='text-[20px] mt-[20px]'>\n              <p> Sol Balance: {balance.toFixed(2)} </p>\n              <p> Token Balance: {tokenBalance.toFixed(2)} </p>\n            </div>\n          )}\n        </h3>\n        <div className=\"justify-center flex mt-5\">\n          <MyWallet /> <br />\n        </div>\n        <div className=\"h-10\"></div>\n        <div className=\"w-[80%] mx-auto mt-10\">\n\n          {errMsg && (\n            <p className='text-red-500 text-sm'>{errMsg}</p>\n          )}\n          {msg && (\n            <p className='text-green-500 text-sm'>{msg}</p>\n          )}\n          {displayPubKey && (\n            <h1 className='text-blue-500 text-sm'>Escrow Mint Account: {displayPubKey}</h1>\n          )}\n        </div>\n        <div className=\"flex mx-auto my-20\">\n\n          <div className=\"w-[40%]\">\n            <CreateEscrow setDisplayPubKey={setDisplayPubKey} setErrMsg={setErrMsg} setMsg={setMsg} />\n          </div>\n          <div className=\"w-[40%]\">\n            <AccountList />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  // getSolletExtensionWallet,\n  // getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { config } from \"./utils/config\";\n\nfunction Providers({ children }: any) {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Devnet;\n  console.log(network);\n\n  const localhost = \"http://127.0.0.1:8899\"\n  const clusterUrl = React.useMemo(() => clusterApiUrl(network), [network])\n  const endpoint = config.localhost ? localhost : clusterUrl;\n  const wallets = React.useMemo(\n    () => [\n      getLedgerWallet(),\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      // getSolletWallet({ network }),\n      // getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets}>\n          {children}\n        </WalletProvider>\n      </ConnectionProvider>\n    </>\n  );\n}\n\nexport default Providers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './output.css';\nimport App from './App';\nimport Providers from './Providers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers children={<App />} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}