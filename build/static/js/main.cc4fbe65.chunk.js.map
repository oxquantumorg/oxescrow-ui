{"version":3,"sources":["utils/tokens/getAccountInfo.ts","logo.svg","components/templates/input.tsx","components/templates/button.tsx","components/myWallet.tsx","pages/create-escrow.tsx","components/accountList.tsx","utils/config.ts","utils/tokens/getAssociatedTokenAccount.ts","utils/tokens/getAssociatedTokenAddress.ts","utils/helpers.ts","App.tsx","web3hooks/TokenInfoHook.ts","Providers.tsx","index.tsx"],"names":["AccountState","async","getAccountInfo","connection","address","commitment","programId","arguments","length","undefined","TOKEN_PROGRAM_ID","info","Error","owner","equals","data","AccountLayout","span","rawAccount","decode","Buffer","from","mint","amount","delegate","delegateOption","delegatedAmount","isInitialized","state","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","rentExemptReserve","closeAuthority","closeAuthorityOption","Input","_ref","title","value","onChangeHandler","_jsxs","_Fragment","children","_jsx","htmlFor","className","onChange","e","target","type","id","Button","text","onClickHandler","disabled","onClick","concat","MyWallet","WalletModalProvider","WalletMultiButton","CreateEscrow","setMsg","setErrMsg","receiverPublickey","setReceiverPublickey","useState","setAmount","publicKey","useWallet","createEscrow","useCallback","url","res","fetch","then","json","isSuccess","escrowAcc","message","error","console","log","WalletDisconnectButton","AccountList","showHistory","accounts","setAccounts","getData","map","pubkey","temp_token_account_pubkey","escrow_amount","status","completed","useEffect","interval","setInterval","clearInterval","scope","acc","config","localhost","usdcMintPubKey","PublicKey","escrowProgramId","getAssociatedTokenAccount","allowOwnerOffCurve","associatedTokenProgramId","ASSOCIATED_TOKEN_PROGRAM_ID","associatedToken","isOnCurve","toBuffer","findProgramAddress","getAssociatedTokenAddress","shortenAddress","count","firstThree","slice","lastThree","App","balance","tokenBalance","TokenInfoHook","setBalance","setTokenBalance","useConnection","signTransaction","WalletNotConnectedError","getBalance","LAMPORTS_PER_SOL","tokenAccount","Number","toString","errMsg","setShowHistory","msg","localStorage","getItem","packageJson","version","window","caches","keys","names","forEach","name","delete","location","reload","clear","setItem","src","logo","alt","toFixed","Providers","network","WalletAdapterNetwork","Mainnet","clusterUrl","React","useMemo","clusterApiUrl","wallets","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","endpoint","WalletProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"s1DAAA,kEAGO,IAAKA,EAAY,SAAZA,GAAY,OAAZA,IAAY,iCAAZA,IAAY,6BAAZA,IAAY,mBAAZA,CAAY,MAMjBC,eAAeC,EAClBC,EACAC,EACAC,GAED,IADCC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,IAEZ,MAAMC,QAAaR,EAAWD,eAAeE,EAASC,GACtD,IAAKM,EAAM,MAAM,IAAIC,MAAM,6BAC3B,IAAKD,EAAKE,MAAMC,OAAOR,GAAY,MAAM,IAAIM,MAAM,iCACnD,GAAID,EAAKI,KAAKP,SAAWQ,IAAcC,KAAM,MAAM,IAAIL,MAAM,gCAE7D,MAAMM,EAAaF,IAAcG,OAAOC,EAAOC,KAAKV,EAAKI,OAEzD,MAAO,CACHX,UACAkB,KAAMJ,EAAWI,KACjBT,MAAOK,EAAWL,MAClBU,OAAQL,EAAWK,OACnBC,SAAUN,EAAWO,eAAiBP,EAAWM,SAAW,KAC5DE,gBAAiBR,EAAWQ,gBAC5BC,cAAeT,EAAWU,QAAU5B,EAAa6B,cACjDC,SAAUZ,EAAWU,QAAU5B,EAAa+B,OAC5CC,WAAYd,EAAWe,eACvBC,kBAAmBhB,EAAWe,eAAiBf,EAAWc,SAAW,KACrEG,eAAgBjB,EAAWkB,qBAAuBlB,EAAWiB,eAAiB,KAEtF,C,4fCnCe,G,cAAA,IAA0B,kC,OCQ1B,SAASE,EAAKC,GAA4C,IAA3C,MAAEC,EAAK,MAAEC,EAAK,gBAAEC,GAAwBH,EAClE,OACII,eAAAC,WAAA,CAAAC,SAAA,CACIC,cAAA,SAAOC,QAAQ,cAAcC,UAAU,gEACTH,SACzBL,IAGLM,cAAA,SACIL,MAAOA,EACPQ,SAAWC,GAAMR,EAAgBQ,EAAEC,OAAOV,OAC1CW,KAAK,OACLC,GAAG,cACHL,UAAU,+QAS1B,CCvBe,SAASM,EAAMf,GAA6C,IAA5C,KAAEgB,EAAI,eAAEC,EAAc,SAAEC,GAAiBlB,EAepE,OACIO,cAAA,UACIY,QAAUD,EAA4B,OAAjBD,EACrBJ,KAAK,SACLJ,UAAS,GAAAW,OAlBD,qQAkBgB,KAAAA,OAAIF,GANV,eAM0CZ,SAC3DU,GAIb,C,oBCNeK,MAnBYA,IASvBd,cAAA,OAAKE,UAAU,GAAEH,SACfC,cAAA,QAAME,UAAU,GAAEH,SAChBC,cAACe,IAAmB,CAAAhB,SAClBC,cAACgB,IAAiB,UC6DbC,MAxEf,SAAqBxB,GAA8B,IAA7B,OAAEyB,EAAM,UAAEC,GAAgB1B,EAC9C,MAAO2B,EAAmBC,GAAwBC,mBAAS,KAEpD5C,EAAQ6C,GAAaD,mBAAS,MAC/B,UAAEE,GAAcC,cAEhBC,EAAeC,uBAAYvE,UAC/B,IACE,IAAKoE,EACH,OAAOL,EAAU,0CACnB,IAAKzC,EAAQ,OAAOyC,EAAU,+BAC9B,MAAMS,EAAG,iFAAAf,OAAoFW,EAAS,YAAAX,OAAWnC,GAC3GmD,QAAYC,MAAMF,GAAKG,MAAMF,GAAQA,EAAIG,SAE3CH,EAAII,WACNZ,EAAqBQ,EAAI3D,KAAKgE,WAC9BhB,EAAOW,EAAIM,UAEXhB,EAAUU,EAAIM,QAElB,CAAE,MAAOC,GACPC,QAAQC,IAAIF,EACd,IACC,CAAC1D,EAAQ8C,EAAWH,EAAsBF,EAAWD,IAExD,OACErB,eAAA,OAAKK,UAAU,mBAAkBH,SAAA,CAC/BC,cAAA,MAAIE,UAAU,iCAAgCH,SAAC,kKAM/CC,cAAA,OAAKE,UAAU,OAAMH,SACnBC,cAACR,EAAK,CACJI,gBAAiByB,EACjB1B,MAAOyB,EACP1B,MAAM,sBAGVM,cAAA,OAAKE,UAAU,OAAMH,SACnBC,cAACR,EAAK,CACJI,gBAAiB2B,EACjB5B,MAAOjB,EACPgB,MAAM,yBAIR8B,GACA3B,eAAA,OAAKK,UAAU,2BAA0BH,SAAA,CACvCC,cAACc,EAAQ,IAAG,IAACd,cAAA,YAGhBwB,GACC3B,eAAA,OAAKK,UAAU,oCAAmCH,SAAA,CAChDC,cAAA,OAAAD,SACEC,cAACQ,EAAM,CACLC,KAAK,0BACLE,UAAWa,EACXd,eAAgBgB,MAGpB1B,cAAA,SACAA,cAAA,OAAAD,SACEC,cAACuC,IAAsB,WAMnC,ECvEe,SAASC,EAAW/C,GAA0B,IAAzB,YAAEgD,GAAoBhD,EACxD,MAAM,UAAE+B,GAAcC,eACfiB,EAAUC,GAAerB,mBAAS,IAEnCsB,EAAUjB,uBAAYvE,UAC1B,IACE,IAAKoE,EAAW,OAChB,MAAMI,EACJ,mEACIC,QAAYC,MAAMF,EAAMJ,GAAWO,MAAMF,GAAQA,EAAIG,SAC3DW,EACEd,EAAIgB,KAAK3E,IACY,CACjB4E,OAAQ5E,EAAK6E,0BACbrE,OAAQR,EAAK8E,cACbC,OAAQ/E,EAAKgF,UAAY,OAAS,cAK1C,CAAE,MAAOd,GACPC,QAAQC,IAAIF,EACd,IACC,CAACZ,IAWJ,OATA2B,qBAAU,KACR,MAAMC,EAAWC,aAAY,KAC3BhB,QAAQC,IAAI,iBACZM,GAAS,GACR,KAEH,MAAO,IAAMU,cAAcF,EAAS,GACnC,CAACR,IAGF5C,cAAA,OAAKE,UAAU,2BAA0BH,SACvCF,eAAA,SAAOK,UAAU,2EAA0EH,SAAA,CACzFC,cAAA,SAAOE,UAAU,iFAAgFH,SAC/FF,eAAA,MAAAE,SAAA,CACEC,cAAA,MAAIuD,MAAM,MAAMrD,UAAU,YAAWH,SAAC,cAGtCC,cAAA,MAAIuD,MAAM,MAAMrD,UAAU,YAAWH,SAAC,WAGtCC,cAAA,MAAIuD,MAAM,MAAMrD,UAAU,YAAWH,SAAC,gBAK1CF,eAAA,SAAAE,SAAA,CACG0C,GACCC,EAASG,KAAKW,GACZ3D,eAAA,MAEEK,UAAU,0DAAyDH,SAAA,CAEnEC,cAAA,MACEuD,MAAM,MACNrD,UAAU,wEAAuEH,SAEhFyD,EAAIV,SAEP9C,cAAA,MAAIE,UAAU,YAAWH,SAAEyD,EAAI9E,SAC/BsB,cAAA,MAAIE,UAAU,YAAWH,SAAEyD,EAAIP,WAV1BO,EAAIV,WAcbL,GACAzC,cAAA,MAAAD,SACEC,cAAA,MAAIE,UAAU,cAAaH,SAAC,gCAO1C,C,kBCjFO,MAAM0D,EAAS,CACpBC,eAAW9F,EACX+F,eAAgB,IAAIC,IAAU,gDAC9BC,gBAAiB,IAAID,IACnB,iD,qBCEGxG,eAAe0G,EACpBxG,EACAmB,EACAT,GAKC,IAJD+F,EAAkBrG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAClBF,EAAuBE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvBH,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,IACZmG,EAAwBtG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGuG,IAE3B,MAAMC,QCbD9G,eACHqB,EACAT,GAImB,IAHnB+F,EAAkBrG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAClBD,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,IACZmG,EAAwBtG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGuG,IAE3B,IAAKF,IAAuBH,IAAUO,UAAUnG,EAAMoG,YAAa,MAAM,IAAIrG,MAAM,2BAEnF,MAAOR,SAAiBqG,IAAUS,mBAC9B,CAACrG,EAAMoG,WAAY3G,EAAU2G,WAAY3F,EAAK2F,YAC9CJ,GAGJ,OAAOzG,CACX,CDFgC+G,CAC5B7F,EACAT,EACA+F,EACAtG,EACAuG,GAGF,IAOE,aANoB3G,YAClBC,EACA4G,EACA1G,EACAC,EAGJ,CAAE,MAAO2E,GACP,MACF,CACF,C,aEpCO,MAAMmC,EAAkBhH,IAC7B,MAAMiH,EAAQjH,EAAQI,QAAU,EAAI,EAAI,EAClC8G,EAAalH,EAAQmH,MAAM,EAAGF,GAC9BG,EAAYpH,EAAQmH,OAAOF,GACjC,MAAM,GAAN3D,OAAU4D,EAAU,OAAA5D,OAAM8D,EAAS,ECsFtBC,MAhFf,WACE,MAAM,UAAEpD,GAAcC,eAEhB,QAAEoD,EAAO,aAAEC,GCNUC,MAC3B,MAAOF,EAASG,GAAc1D,mBAAS,IAChCwD,EAAcG,GAAmB3D,mBAAS,IAC3C,WAAEhE,GAAe4H,eACjB,UAAE1D,EAAS,gBAAE2D,GAAoB1D,cAEjCb,EAAUe,uBAAYvE,UAC1B,IACE,IAAKoE,IAAc2D,EAAiB,MAAM,IAAIC,IAE9C,MAAMP,QAAgBvH,EAAW+H,WAAW7D,GAC5CwD,EAAWH,EAAUS,KAErB,MAAMC,QAAqBzB,EACzBxG,EACAmG,EAAOE,eACPnC,GAGc,OAAZ+D,QAAY,IAAZA,KAAc7G,QAChBuG,EAAgBO,OAAmB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAc7G,OAAO+G,YAEhD,CAAE,MAAOrD,GACPC,QAAQC,IAAIF,EACd,IACC,CAAC9E,EAAYkE,EAAW2D,IAW3B,OATAhC,qBAAU,KACR,MAAMC,EAAWC,aAAY,KAC3BhB,QAAQC,IAAI,iBACZ1B,GAAS,GACR,KAEH,MAAO,IAAM0C,cAAcF,EAAS,GACnC,CAACxC,IAEG,CAAEiE,UAASC,eAAc,ED9BEC,IAC3BW,EAAQvE,GAAaG,mBAAS,KAC9BmB,EAAakD,GAAkBrE,oBAAS,IACxCsE,EAAK1E,GAAUI,mBAAS,IAyB/B,OAJA6B,qBAAU,KAlBM0C,aAAaC,QAAQ,aACnBC,EAAYC,UACtB,WAAYC,SACdC,OAAOC,OAAOpE,MAAMqE,IAElBA,EAAMC,SAASC,IACbJ,OAAOK,OAAOD,EAAK,GACnB,IAGJL,OAAOO,SAASC,UAGlBZ,aAAaa,QACbb,aAAac,QAAQ,UAAWZ,EAAYC,SAKvC,GACN,IAGDhG,cAAA,OAAKE,UAAU,MAAKH,SAClBF,eAAA,UAAQK,UAAU,aAAYH,SAAA,CAC5BC,cAAA,OAAK4G,IAAKC,EAAM3G,UAAU,mBAAmB4G,IAAI,SACjD9G,cAAA,MAAIE,UAAU,4BAA2BH,SAAC,aACzCyB,GACCxB,cAAA,MAAIE,UAAU,yBAAwBH,SACpCF,eAAA,OAAKK,UAAU,wBAAuBH,SAAA,CACpCC,cAAA,KAAAD,SAAG,uBACHC,cAAA,KAAGE,UAAU,0CAAyCH,SACnDwE,EAAe/C,EAAUiE,mBAMlCzF,cAAA,OAAKE,UAAU,iDAAgDH,SAC7DC,cAAA,OAAKE,UAAU,kBAAiBH,SAC9BF,eAAA,OAAKK,UAAU,mBAAkBH,SAAA,CAC9B2F,GAAU1F,cAAA,KAAGE,UAAU,uBAAsBH,SAAE2F,IAC/CE,GAAO5F,cAAA,KAAGE,UAAU,yBAAwBH,SAAE6F,WAKrD/F,eAAA,OAAKK,UAAU,iDAAgDH,SAAA,CAC7DC,cAAA,OAAKE,UAAU,mBAAkBH,SAC/BC,cAACiB,EAAY,CAACE,UAAWA,EAAWD,OAAQA,MAE9CrB,eAAA,OAAKK,UAAU,2BAA0BH,SAAA,CACvCF,eAAA,OAAKK,UAAU,YAAWH,SAAA,CACxBC,cAACQ,EAAM,CACLE,eAAgBA,IAAMiF,GAAgBlD,GACtC9B,WAAYa,EACZf,KAAK,oBAEPZ,eAAA,OAAKK,UAAU,iCAAgCH,SAAA,CAC7CF,eAAA,KAAAE,SAAA,CAAG,iBAAe8E,EAAQkC,QAAQ,GAAG,OACrClH,eAAA,KAAAE,SAAA,CAAG,kBAAgB+E,EAAaiC,QAAQ,GAAG,aAG/C/G,cAACwC,EAAW,CAACC,YAAaA,cAMtC,E,QEtCeuE,MA/Bf,SAAkBvH,GAAqB,IAApB,SAAEM,GAAeN,EAElC,MAAMwH,EAAUC,IAAqBC,QAG/BC,EAAaC,IAAMC,SAAQ,IAAMC,YAAcN,IAAU,CAACA,IAChE5E,QAAQC,IAAI8E,GAEZ,MAAMI,EAAUH,IAAMC,SACpB,IAAM,CACJG,cACAC,cACAC,cACAC,cACAC,YAAgB,CAAEZ,YAClBa,YAAyB,CAAEb,cAE7B,CAACA,IAGH,OACEjH,cAAAF,WAAA,CAAAC,SACEC,cAAC+H,IAAkB,CAACC,SAAUZ,EAAWrH,SACvCC,cAACiI,IAAc,CAACT,QAASA,EAAQzH,SAC/BC,cAACe,IAAmB,CAAAhB,SAAEA,SAKhC,ECzCAmI,IAASC,OACPnI,cAACqH,IAAMe,WAAU,CAAArI,SACfC,cAACgH,EAAS,CAAAjH,SACRC,cAAC4E,EAAG,QAGRyD,SAASC,eAAe,Q","file":"static/js/main.cc4fbe65.chunk.js","sourcesContent":["import { TOKEN_PROGRAM_ID, AccountLayout } from '@solana/spl-token'\nimport { Connection, PublicKey, Commitment } from '@solana/web3.js'\n\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\nexport async function getAccountInfo(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n) {\n    const info = await connection.getAccountInfo(address, commitment)\n    if (!info) throw new Error('TokenAccountNotFoundError')\n    if (!info.owner.equals(programId)) throw new Error('TokenInvalidAccountOwnerError')\n    if (info.data.length !== AccountLayout.span) throw new Error('TokenInvalidAccountSizeError')\n\n    const rawAccount = AccountLayout.decode(Buffer.from(info.data))\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n    }\n}\n","export default __webpack_public_path__ + \"static/media/logo.b1c195ff.svg\";","import React from 'react'\n\ninterface Props {\n    title: string,\n    value: string,\n    onChangeHandler: (e: any) => void\n}\n\nexport default function Input({ title, value, onChangeHandler }: Props) {\n    return (\n        <>\n            <label htmlFor=\"large-input\" className=\"block mb-2 text-sm font-medium \n            text-gray-900 dark:text-white\">\n                {title}\n            </label>\n\n            <input\n                value={value}\n                onChange={(e) => onChangeHandler(e.target.value)}\n                type=\"text\"\n                id=\"large-input\"\n                className=\"bg-gray-50 border border-gray-300 \n            text-gray-900 text-sm rounded-lg focus:ring-blue-500 \n            focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 \n            dark:border-gray-600 dark:placeholder-gray-400 \n            dark:text-white dark:focus:ring-blue-500 \n            dark:focus:border-blue-500\"\n            />\n        </>\n    )\n}\n","import React from 'react'\n\ninterface Props {\n    text: string,\n    onClickHandler: (e: any) => void,\n    disabled: boolean\n}\nexport default function Button({ text, onClickHandler, disabled }: Props) {\n    const classNames = `focus:outline-none text-white \n    bg-mainPurple \n    font-medium rounded-lg \n    text-sm px-5 py-3 mb-2\n    rounded-lg\n    hover:ring-4\n    focus:ring-4\n    \n    focus:ring-gray-400 \n      hover:ring-gray-600\n      dark:hover:ring-gray-600\n      `\n    const classNameDisabled = \"bg-gray-400\"\n    \n    return (\n        <button\n            onClick={!disabled ? onClickHandler : () => {}}\n            type=\"button\"\n            className={`${classNames} ${disabled && classNameDisabled}`}>\n            {text}\n        </button>\n\n    )\n}\n","import React from \"react\";\nimport {\n  WalletModalProvider,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\n\nconst MyWallet: React.FC = () => {\n  // const { connection } = useConnection();\n  // let walletAddress = \"\";\n\n  // if (wallet.connected && wallet.publicKey) {\n  //     walletAddress = wallet.publicKey.toString()\n  // }\n\n  return (\n    <div className=\"\">\n      <span className=\"\">\n        <WalletModalProvider>\n          <WalletMultiButton />\n        </WalletModalProvider>\n      </span>\n    </div>\n  );\n};\n\nexport default MyWallet;\n","import React, { useCallback, useState } from \"react\";\nimport Input from \"../components/templates/input\";\nimport Button from \"../components/templates/button\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport MyWallet from \"../components/myWallet\";\nimport { WalletDisconnectButton } from \"@solana/wallet-adapter-react-ui\";\n\nfunction CreateEscrow({ setMsg, setErrMsg }: any) {\n  const [receiverPublickey, setReceiverPublickey] = useState(\"\");\n\n  const [amount, setAmount] = useState(\"2\");\n  const { publicKey } = useWallet();\n\n  const createEscrow = useCallback(async () => {\n    try {\n      if (!publicKey)\n        return setErrMsg(\"Please connect your wallet to continue\");\n      if (!amount) return setErrMsg(\"Escrow amount is required!!\");\n      const url = `https://oxescrow.api.oxquantumprojects.lol/create_escrow?initializerPublicKey=${publicKey}&amount=${amount}`;\n      const res = await fetch(url).then((res) => res.json());\n\n      if (res.isSuccess) {\n        setReceiverPublickey(res.data.escrowAcc);\n        setMsg(res.message);\n      } else {\n        setErrMsg(res.message);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [amount, publicKey, setReceiverPublickey, setErrMsg, setMsg]);\n\n  return (\n    <div className=\"max-w-sm mx-auto\">\n      <h1 className=\"text-blue-500 text-[15px] mb-5\">\n        Enter the expected Usdc amount. Our API will generate a unique address\n        for escrow. Share this address with the sender to receive the escrowed\n        funds securely.\n      </h1>\n\n      <div className=\"mb-5\">\n        <Input\n          onChangeHandler={setReceiverPublickey}\n          value={receiverPublickey}\n          title=\"Deposit address\"\n        />\n      </div>\n      <div className=\"mb-5\">\n        <Input\n          onChangeHandler={setAmount}\n          value={amount}\n          title=\"Amount to receive\"\n        />\n      </div>\n\n      {!publicKey && (\n        <div className=\"justify-center flex mt-5\">\n          <MyWallet /> <br />\n        </div>\n      )}\n      {publicKey && (\n        <div className=\"justify-center flex flex-col mt-7\">\n          <div>\n            <Button\n              text=\"Generate Escrow Account\"\n              disabled={!publicKey}\n              onClickHandler={createEscrow}\n            />\n          </div>\n          <br />\n          <div>\n            <WalletDisconnectButton />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CreateEscrow;\n","import { useWallet } from \"@solana/wallet-adapter-react\";\nimport React, { useCallback, useEffect, useState } from \"react\";\ninterface Props {\n  showHistory: boolean;\n}\n\nexport default function AccountList({ showHistory }: Props) {\n  const { publicKey } = useWallet();\n  const [accounts, setAccounts] = useState([]);\n\n  const getData = useCallback(async () => {\n    try {\n      if (!publicKey) return;\n      const url =\n        \"https://oxescrow.api.oxquantumprojects.lol/getescrows?publicKey=\";\n      const res = await fetch(url + publicKey).then((res) => res.json());\n      setAccounts(\n        res.map((data: any) => {\n          const escrowData = {\n            pubkey: data.temp_token_account_pubkey,\n            amount: data.escrow_amount,\n            status: data.completed ? \"Paid\" : \"Pending\",\n          };\n          return escrowData;\n        })\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }, [publicKey]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      console.log(\"refreshing...\");\n      getData();\n    }, 6000);\n\n    return () => clearInterval(interval);\n  }, [getData]);\n\n  return (\n    <div className=\"relative overflow-x-auto\">\n      <table className=\"w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400\">\n        <thead className=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n          <tr>\n            <th scope=\"col\" className=\"px-6 py-3\">\n              PublicKey\n            </th>\n            <th scope=\"col\" className=\"px-6 py-3\">\n              Amount\n            </th>\n            <th scope=\"col\" className=\"px-6 py-3\">\n              Status\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {showHistory &&\n            accounts.map((acc: any) => (\n              <tr\n                key={acc.pubkey}\n                className=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\"\n              >\n                <th\n                  scope=\"row\"\n                  className=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white\"\n                >\n                  {acc.pubkey}\n                </th>\n                <td className=\"px-6 py-4\">{acc.amount}</td>\n                <td className=\"px-6 py-4\">{acc.status}</td>\n              </tr>\n            ))}\n\n          {!showHistory && (\n            <tr>\n              <td className=\"text-md p-4\">History turned off</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const config = {\n  localhost: undefined,\n  usdcMintPubKey: new PublicKey(\"DK6BeYfBvcb7epFnDiEXvqZKVbiPjiV692h7oWoB5P5L\"),\n  escrowProgramId: new PublicKey(\n    \"EQ241DM743htRoAQ1WS8S8QDL1g4dKkndCLuUQ552zgS\"\n  ),\n};\n","import {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, Commitment } from \"@solana/web3.js\";\nimport { getAccountInfo } from \"./getAccountInfo\";\nimport { getAssociatedTokenAddress } from \"./getAssociatedTokenAddress\";\n\nexport async function getAssociatedTokenAccount(\n  connection: Connection,\n  mint: PublicKey,\n  owner: PublicKey,\n  allowOwnerOffCurve = false,\n  commitment?: Commitment,\n  programId = TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n) {\n  const associatedToken = await getAssociatedTokenAddress(\n    mint,\n    owner,\n    allowOwnerOffCurve,\n    programId,\n    associatedTokenProgramId\n  );\n\n  try {\n    let account = await getAccountInfo(\n      connection,\n      associatedToken,\n      commitment,\n      programId\n    );\n    return account;\n  } catch (error: any) {\n    return undefined;\n  }\n}\n","// getAssociatedTokerAddress.ts\nimport { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token'\nimport { PublicKey } from '@solana/web3.js'\n\nexport async function getAssociatedTokenAddress(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new Error('TokenOwnerOffCurveError')\n\n    const [address] = await PublicKey.findProgramAddress(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    )\n\n    return address\n}","export const shortenAddress = (address: string) => {\n  const count = address.length >= 5 ? 5 : 2;\n  const firstThree = address.slice(0, count);\n  const lastThree = address.slice(-count);\n  return `${firstThree}***${lastThree}`;\n};\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport CreateEscrow from \"./pages/create-escrow\";\nimport AccountList from \"./components/accountList\";\nimport { TokenInfoHook } from \"./web3hooks/TokenInfoHook\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport packageJson from \"../package.json\";\nimport Button from \"./components/templates/button\";\nimport { shortenAddress } from \"./utils/helpers\";\n\nfunction App() {\n  const { publicKey } = useWallet();\n\n  const { balance, tokenBalance } = TokenInfoHook();\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [showHistory, setShowHistory] = useState(false);\n  const [msg, setMsg] = useState(\"\");\n\n  const check = () => {\n    let version = localStorage.getItem(\"version\");\n    if (version !== packageJson.version) {\n      if (\"caches\" in window) {\n        caches.keys().then((names) => {\n          // Delete all the cache files\n          names.forEach((name) => {\n            caches.delete(name);\n          });\n        });\n\n        window.location.reload();\n      }\n\n      localStorage.clear();\n      localStorage.setItem(\"version\", packageJson.version);\n    }\n  };\n\n  useEffect(() => {\n    check();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo mx-auto\" alt=\"logo\" />\n        <h3 className=\"font-semibold text-center\">Oxescrow</h3>\n        {publicKey && (\n          <h3 className=\"text-white text-center\">\n            <div className=\"text-[20px] mt-[10px]\">\n              <p> Connected wallet </p>\n              <p className=\"text-blue-400 font-semibold text-[17px]\">\n                {shortenAddress(publicKey.toString())}\n              </p>\n            </div>\n          </h3>\n        )}\n\n        <div className=\"flex justify-center mt-2 flex-col items-center\">\n          <div className=\"md:w-[50%] mb-8\">\n            <div className=\"max-w-sm mx-auto\">\n              {errMsg && <p className=\"text-red-500 text-sm\">{errMsg}</p>}\n              {msg && <p className=\"text-green-500 text-sm\">{msg}</p>}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-center mt-2 flex-col items-center\">\n          <div className=\"md:w-[50%] mb-20\">\n            <CreateEscrow setErrMsg={setErrMsg} setMsg={setMsg} />\n          </div>\n          <div className=\"w-[94%] md:w-[50%] mb-20\">\n            <div className=\"flex mb-4\">\n              <Button\n                onClickHandler={() => setShowHistory(!showHistory)}\n                disabled={!!publicKey}\n                text=\"Show history &gt;&gt;\"\n              />\n              <div className=\"text-[17px] ml-8 text-blue-500\">\n                <p> Sol Balance: {balance.toFixed(2)} </p>\n                <p> Usdc Balance: {tokenBalance.toFixed(2)} </p>\n              </div>\n            </div>\n            <AccountList showHistory={showHistory} />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { config } from \"../utils/config\";\nimport { getAssociatedTokenAccount } from \"../utils/tokens/getAssociatedTokenAccount\";\n\nexport const TokenInfoHook = () => {\n  const [balance, setBalance] = useState(0);\n  const [tokenBalance, setTokenBalance] = useState(0);\n  const { connection } = useConnection();\n  const { publicKey, signTransaction } = useWallet();\n\n  const onClick = useCallback(async () => {\n    try {\n      if (!publicKey || !signTransaction) throw new WalletNotConnectedError();\n\n      const balance = await connection.getBalance(publicKey);\n      setBalance(balance / LAMPORTS_PER_SOL);\n\n      const tokenAccount = await getAssociatedTokenAccount(\n        connection,\n        config.usdcMintPubKey,\n        publicKey\n      );\n\n      if (tokenAccount?.amount) {\n        setTokenBalance(Number(tokenAccount?.amount.toString()));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [connection, publicKey, signTransaction]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      console.log(\"refreshing...\");\n      onClick();\n    }, 6000);\n\n    return () => clearInterval(interval);\n  }, [onClick]);\n\n  return { balance, tokenBalance };\n};\n","import React from \"react\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n// import { config } from \"./utils/config\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\n\nfunction Providers({ children }: any) {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Mainnet;\n\n  // const localhost = undefined //\"http://127.0.0.1:8899\"\n  const clusterUrl = React.useMemo(() => clusterApiUrl(network), [network]);\n  console.log(clusterUrl);\n  // const endpoint = config.localhost ? localhost : clusterUrl;\n  const wallets = React.useMemo(\n    () => [\n      getLedgerWallet(),\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  return (\n    <>\n      <ConnectionProvider endpoint={clusterUrl}>\n        <WalletProvider wallets={wallets}>\n          <WalletModalProvider>{children}</WalletModalProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </>\n  );\n}\n\nexport default Providers;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./output.css\";\nimport App from \"./App\";\nimport Providers from \"./Providers\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}